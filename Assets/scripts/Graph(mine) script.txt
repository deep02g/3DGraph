using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Graph : MonoBehaviour
{
    [SerializeField]Transform pointPrefab;
    [SerializeField,Range(10,100)]int resoultion = 10;
    [SerializeField] FunctionLibrary.FunctionName function;
    Transform[] Points;

    [SerializeField, Min(0f)]float functionDuration = 1f, transitionDuration = 1f;
    float duration;
    bool transitioning;
    FunctionLibrary.FunctionName transitionFunction;

    public enum TransitionMode { Cycle, Random }
    [SerializeField] TransitionMode transitionMode;

    private void Awake()
    {
   
        float step = 2f / resoultion;
        var scale = Vector3.one * step;
        //Vector3 position = Vector3.zero;
        Points = new Transform[resoultion * resoultion];

        for (int i = 0; i < Points.Length; i++)
        {
            
            Transform point = Points[i] = Instantiate(pointPrefab);
      
            point.localScale = scale;
            point.SetParent(transform, false);
            
            
        }

       
    }

    void Update()
    {
        duration += Time.deltaTime;
        if (transitioning)
        {
            if (duration >= transitionDuration)
            {
                duration -= transitionDuration;
                transitioning = false;
            }
        }
        else if(duration >= functionDuration)
        {
            duration -= functionDuration;
            // function = FunctionLibrary.GetNextFunctionName(function);
            transitioning = true;
            transitionFunction = function;
            pickNextFunction();
        }
        if(transitioning)
        {
            UpdateFunctionTransition();
        }
        else
        {
            UpdateFunction();
        }
        

        //for(int i = 0; i < Points.Length; i++)
        //{
        //    Transform point = Points[i];
        //    Vector3 position = point.localPosition;
        //    //position.y = position.x * position.x * position.x;
        //   // position.y = Mathf.Sin((position.x + time) * Mathf.PI * position.x);
        //    // position.y = (position.x * position.x) + time;
        //    //if(function == 0)
        //    //{
        //    //    position.y = FunctionLibrary.Wave(position.x, time);
        //    //}
        //    //else if( function == 1)
        //    //{
        //    //    position.y = FunctionLibrary.MultiWave(position.x, time);
        //    //}
        //    //else
        //    //{
        //    //    position.y = FunctionLibrary.Ripple(position.x, time);
        //    //}

        //    position.y = f(position.x, position.z, time);

        //    point.localPosition = position;
        //}
    }

    void UpdateFunction()
    {
        float time = Time.time;
        FunctionLibrary.Function from = FunctionLibrary.GetFunction(transitionFunction), to = FunctionLibrary.GetFunction(function);
        float progress = duration / transitionDuration;
        float step = 2f / resoultion;
        float v = 0.5f * step - 1f;

        for (int i = 0, x = 0, z = 0; i < Points.Length; i++, x++)
        {
            if (x == resoultion)
            {
                x = 0;
                z += 1;
                v = (z + 0.5f) * step - 1f;
            }
            float u = (x + 0.5f) * step - 1f;
            //float v = (z + 0.5f) * step - 1f;
            Points[i].localPosition = FunctionLibrary.Morph(u, v, time, from, to, progress);
        }
    } 
    
    
    void UpdateFunctionTransition()
    {
        float time = Time.time;
        FunctionLibrary.Function f = FunctionLibrary.GetFunction(function);
        float step = 2f / resoultion;
        float v = 0.5f * step - 1f;

        for (int i = 0, x = 0, z = 0; i < Points.Length; i++, x++)
        {
            if (x == resoultion)
            {
                x = 0;
                z += 1;
                v = (z + 0.5f) * step - 1f;
            }
            float u = (x + 0.5f) * step - 1f;
            //float v = (z + 0.5f) * step - 1f;
            Points[i].localPosition = f(u, v, time);
        }
    }
    
    void pickNextFunction()
    {
        function = transitionMode == TransitionMode.Cycle ?
            FunctionLibrary.GetNextFunctionName(function) :
            FunctionLibrary.GetRandomFunctionNameOtherThan(function);
    }

   
    
}
